import cuentas.*
import cosas.*
import casa.*

describe "Sobre las cosas que se compran. Tras comprar una heladera, una cama y una placha" {
  method initialize() {
    cuentaCorriente.saldo(50000) // Se utiliza el setter solo por el entorno de testing
    casaDePepeYJulian.comprar(heladera)
    casaDePepeYJulian.comprar(cama)
    casaDePepeYJulian.comprar(plancha)
  }
  
  test "lista de cosas compradas es heladera, cama y plancha" {
    assert.equals([heladera, cama, plancha], casaDePepeYJulian.compras())
  }
  
  test "cantidad de cosas compradas es 3" {
    assert.equals(3, casaDePepeYJulian.cantidadDeCosasCompradas())
  }
  
  test "tiene algún electrodoméstico" {
    assert.that(casaDePepeYJulian.tieneAlgun(electrodomestico))
  }
  
  test "tiene algún mueble" {
    assert.that(casaDePepeYJulian.tieneAlgun(mueble))
  }
  
  test "no tiene alguna comida" {
    assert.notThat(casaDePepeYJulian.tieneAlgun(comida))
  }
  
  test "viene de comprar un electrodoméstico es true" {
    assert.that(casaDePepeYJulian.vieneDeComprar(electrodomestico))
  }
  
  test "viene de comprar un mueble es false" {
    assert.notThat(casaDePepeYJulian.vieneDeComprar(mueble))
  }
  
  test "es derrochona" {
    assert.that(casaDePepeYJulian.esDerrochona())
  }
  
  test "compra más cara es heladera" {
    assert.equals(heladera, casaDePepeYJulian.compraMasCara())
  }
  
  test "electrodomésticos comprados son heladera y plancha" {
    assert.equals(
      [heladera, plancha],
      casaDePepeYJulian.comprados(electrodomestico)
    )
  }
  
  test "muebles comprados son solo la cama" {
    assert.equals([cama], casaDePepeYJulian.comprados(mueble))
  }
  
  test "no hay comida comprada" {
    assert.equals([], casaDePepeYJulian.comprados(comida))
  }
  
  test "no es mala época" {
    assert.notThat(casaDePepeYJulian.malaEpoca())
  }
  
  test "falta comprar tiraDeAsado y paqueteDeFideos" {
    assert.equals(
      [tiraDeAsado, paqueteDeFideos],
      casaDePepeYJulian.queFaltaComprar([tiraDeAsado, plancha, paqueteDeFideos])
    )
  }
  
  test "falta comida" {
    assert.that(casaDePepeYJulian.faltaComida())
  }
  
  test "tras comprar paqueteDeFideos y tiraDeAsado no falta comida" {
    casaDePepeYJulian.comprar(paqueteDeFideos)
    casaDePepeYJulian.comprar(tiraDeAsado)
    
    assert.notThat(casaDePepeYJulian.faltaComida())
  }
  
  test "categorías compradas son electrodoméstico y mueble" {
    assert.equals(
      #{electrodomestico, mueble},
      casaDePepeYJulian.categoriasCompradas()
    )
  }
}

describe "Casa con cuenta corriente. Saldo inicial 1000" {
  method initialize() {
    cuentaCorriente.saldo(1000) // Se utiliza el setter solo por el entorno de testing
  }
  
  test "Se compra paqueteDeFideos y tiraDeAsado, entonces la cuenta corriente queda con saldo 600." {
    casaDePepeYJulian.comprar(paqueteDeFideos)
    casaDePepeYJulian.comprar(tiraDeAsado)

    assert.equals(600, cuentaCorriente.saldo())
  }
}